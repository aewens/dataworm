#!/usr/bin/env ruby

=begin
    
File:      dwrm
Version:   0.0.2
Author:    Austin Ewens
Created:   07-17-2014
Copyright: 2014, Austin Ewens
Purpose:   A shell utility for a private version control system
    
=end

# $:.unshift(File.expand_path(File.dirname(__FILE__) + "/lib"))
require "fileutils"
require "yaml"

# here = File.expand_path(File.dirname(__FILE__))

#-- Function graveyard
    # hash = rand(36**16).to_s(36)
    # /(\.?\.?(?:\/\w*)*)[^\/]?/
    
puts "\n---[ DataWorm ]---\n\n"

def help_docs
# Documentation for DataWorm

    puts <<-EOF
= dwrm v0.0.2

* Written by Austin Ewens
* Copyright 2014, Austin Ewens


== Description:

DWRM stands for DataWoRM (formerly written as DataWorm)

It is a Private Version Control System (PVCS) that acts as a Git substitute to 
create local repositories on your machine only accessible by you*. The intent 
is to allow for version control while giving you both control and privacy over 
your data.

DataWorm will also not only manage the historical versions of your projects in 
a PVCS fashion, but also make delta backups and temporary restore points 
whenever any destructive action is done to your project to allow for immediate 
restore to the last version that was popped from your repository.

* Refer to Disclaimer


== Disclaimer

DataWorm is strictly an offline service that only manages data locally across 
your drive. No monitoring of any kind is done through legitimate copies of 
DataWorm. All data obtained from your computer by DataWorm does not and will 
not ever be sent outside the scope of your machine unless specified otherwise. 

For any legitimate concerns regarding the disclaimers above, contact me at 
https://github.com/aewens or https://twitter.com/aewens_


== Compatibility

DataWorm intends to add compatibility for Git so that it will not be able to 
accidentally interact with and/or corrupt any of DataWorm's configurations and 
possible backups.


== Usage:

    dwrm [commands] [hash] [flags] [tag]


== Commands

help    :: Print out the documenation you are reading now
init    :: Intialize the .dwrm directory and its configurations
EOF
# push    :: Push a version to your repository
# pop     :: Pop a version from your repository
# revert  :: {hash} -> Takes a version hash as a parameter
#             Revert back to version {hash} from the repository
# undo    :: {num} -> Takes a number as a parameter; Defaults to 1
#             Rollback {num} versions back in the repo's Version Stack
# redo    :: Pushes back any versions removed by pop, revert, or undo
# remove  :: Safely remove your project from DataWorm
# restore :: Recreate your project to DataWorm if it was removed
# recover :: Rollback entire repository back to last version if corrupted    
# 
# 
# == Flags
# 
# Options:
#     [-bBeos]
#     [--backup, no-backup, encrypt, offline, ssh]
# 
# backup    :: Call backup when disabled in config
# no-backup :: Negate the effect of default backups
# encrypt   :: Enables encryption on all data for the current project
# offline   :: If using SSH, helps improve speed by skipping online check
# ssh       :: Tell DataWorm to look for your SSH server to store versions
# 
# 
# EOF
end

def directory_exists? dest
# Determine if directory exists

    return File.exists? File.expand_path(dest)
end

def push_configs dir
# Push configuration files to .dwrm
    
    
    config = "#{dir}/config.yml"
    File.open config, File::CREAT unless File.exist? config
    File.open(config, "w") do |f|
        quux = {}
        quux[:uuid] = 1.upto(8).map{rand(16).to_s(16)}.join("")
        quux[:root] = File.expand_path(File.dirname(__FILE__))
        quux[:last] = "-"
        quux[:here] = dir
        quux[:list] = [] #[{hash: time}]
        quux[:time] = Time.now.to_i
        quux[:hist] = ""
        f.write(YAML.dump quux)
    end
    puts File.open(config, "r").read()
    puts "\n---\n\n"
end

def regex_cmd word
# Command regex generator

    return /^(-#{word[0]}$|(--#{word[0]}|#{word[0]})#{word[1..-1]}$)/
end

def parse_args here
# Deal with arguments
    
    # Only alpha commands may pass
    if /^(-[a-zA-Z]$|(--[a-zA-Z]|[a-zA-Z])[a-zA-Z]+?$)/ =~ ARGV[0]
        case ARGV[0]
        when "help" then help_docs()
        when "init"
            dir = "/#{here.join("/")}/.dwrm"
            unless directory_exists? dir
                FileUtils.mkdir_p(dir)
                push_configs(dir)
                
                puts "Initialized empty DataWorm repository in #{dir}"
            else 
                puts "DataWorm has already been initialized."
            end
        when "push"
            curr = here.split("/")[-1]
            root = File.expand_path(File.dirname(__FILE__))
            Dir.chdir ".." do
                cmd  = []
                cmd << "tar -cvzf #{curr}.tar.gz #{curr}/*"
                cmd << "mv #{curr}.tar.gz #{root}/data/"
                %x[#{cmd.join(";")}]
            end
        end
    end
end

# tar -cvzf dataworm.tar.gz dataworm/*

here = ENV["PWD"].sub("~", ENV["HOME"])
parse_args(here) unless ARGV[0].nil?

puts "\n------------------\n\n" 

# FileUtils.rm_rf ".dwrm"
